// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package flats

import (
	"context"
)

const createFlat = `-- name: createFlat :one
INSERT INTO flat (house_id, price, rooms, status)
VALUES ($1, $2, $3, 'Created')
RETURNING id, house_id, price, rooms, status
`

type createFlatParams struct {
	HouseID int64
	Price   int32
	Rooms   int32
}

func (q *Queries) createFlat(ctx context.Context, arg createFlatParams) (Flat, error) {
	row := q.db.QueryRow(ctx, createFlat, arg.HouseID, arg.Price, arg.Rooms)
	var i Flat
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.Price,
		&i.Rooms,
		&i.Status,
	)
	return i, err
}

const getApprovedFlats = `-- name: getApprovedFlats :many
SELECT id, house_id, price, rooms, status
FROM flat
WHERE house_id = $1 AND status = 'Approved'
`

func (q *Queries) getApprovedFlats(ctx context.Context, houseID int64) ([]Flat, error) {
	rows, err := q.db.Query(ctx, getApprovedFlats, houseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flat
	for rows.Next() {
		var i Flat
		if err := rows.Scan(
			&i.ID,
			&i.HouseID,
			&i.Price,
			&i.Rooms,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFlatForUpdate = `-- name: getFlatForUpdate :one
SELECT id, house_id, price, rooms, status
FROM flat
WHERE id = $1 FOR UPDATE
`

func (q *Queries) getFlatForUpdate(ctx context.Context, id int64) (Flat, error) {
	row := q.db.QueryRow(ctx, getFlatForUpdate, id)
	var i Flat
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.Price,
		&i.Rooms,
		&i.Status,
	)
	return i, err
}

const getFlats = `-- name: getFlats :many
SELECT id, house_id, price, rooms, status
FROM flat
WHERE house_id = $1
`

func (q *Queries) getFlats(ctx context.Context, houseID int64) ([]Flat, error) {
	rows, err := q.db.Query(ctx, getFlats, houseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flat
	for rows.Next() {
		var i Flat
		if err := rows.Scan(
			&i.ID,
			&i.HouseID,
			&i.Price,
			&i.Rooms,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFlat = `-- name: updateFlat :one
UPDATE flat
SET price = $2, rooms= $3, status = $4
WHERE id = $1
RETURNING id, house_id, price, rooms, status
`

type updateFlatParams struct {
	ID     int64
	Price  int32
	Rooms  int32
	Status string
}

func (q *Queries) updateFlat(ctx context.Context, arg updateFlatParams) (Flat, error) {
	row := q.db.QueryRow(ctx, updateFlat,
		arg.ID,
		arg.Price,
		arg.Rooms,
		arg.Status,
	)
	var i Flat
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.Price,
		&i.Rooms,
		&i.Status,
	)
	return i, err
}

const updateStatus = `-- name: updateStatus :one
UPDATE flat
SET status = $2
WHERE id = $1
RETURNING id, house_id, price, rooms, status
`

type updateStatusParams struct {
	ID     int64
	Status string
}

func (q *Queries) updateStatus(ctx context.Context, arg updateStatusParams) (Flat, error) {
	row := q.db.QueryRow(ctx, updateStatus, arg.ID, arg.Status)
	var i Flat
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.Price,
		&i.Rooms,
		&i.Status,
	)
	return i, err
}
